#!/bin/bash
#Used openssl base64 printf xxd tee mktemp mkfifo stat

#---sfx_cut---
progname=${0##*/}
progfullname="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/$progname"
progversion=0.1
#Const
steam_signature="!ENC"
checksum_lenght=16 #md5 lenght

#Function definition
read_bytes(){ # read $1 bytes from stdin
  dd iflag=fullblock bs=$1 count=1 2>/dev/null 
}

hex2dec(){ #convert hex string to decimal
  hex=$1; printf "%d" $(( 16#${hex} )) 
} 

b64_2_bytes(){ #convert base64 encoded string to bytes
  echo -n $1|base64 -d 
}

decrypt(){
  #Header read
  signature_lenght=$(echo -n "$steam_signature"|wc --bytes)
  cur_signature=$(read_bytes $signature_lenght)
  if [ "$steam_signature" != "$cur_signature" ]; then
    (>&2 echo "It seems that this steam wasn't encrypted.")
    exit
  fi
  IFS= read -r -d '' session_proto 
  IFS= read -r -d '' stored_private_key
  IFS= read -r -d '' pdkdf2_iteration_count
  IFS= read -r -d '' pass_digest
  
  if [ -n "$stored_private_key" ] && [ -z "$private_key_txt" ]; then
    private_key_txt="$stored_private_key"
  fi
  if [ -n "$pdkdf2_iteration_count" ]; then
    pdkdf2_iteration_flag="-iter $pdkdf2_iteration_count"
  fi
  encrypted_session_key_lenght_hex=$(read_bytes 4|xxd -ps)
  encrypted_session_key_b64=$(read_bytes $(hex2dec $encrypted_session_key_lenght_hex)|base64 -w0)
  session_key_b64=$(openssl rsautl -decrypt -inkey <(echo -n "$private_key_txt") -in <(b64_2_bytes $encrypted_session_key_b64) -passin file:<(echo -n $password) -out >(base64 -w0))
  if [ -z "$session_key_b64" ]; then
    (>&2 echo "Failed to extract session key.")
    exit 1
  fi
  md5_file_pipe=$(mktemp -u)
  md5_file_calc=$(mktemp -u)
  openssl enc -d -$session_proto -md $pass_digest $pdkdf2_iteration_flag -pass file:<(b64_2_bytes $session_key_b64)|tee >(tail -c $checksum_lenght > $md5_file_pipe;touch $md5_file_pipe.ok)|head -c -$checksum_lenght|tee >(openssl md5 -binary > $md5_file_calc;touch $md5_file_calc.ok)
  if ! cmp -s $md5_file_pipe $md5_file_calc; then
     (>&2 echo "Checksum error.")
  fi
  while [ ! -f $md5_file_pipe.ok ] || [ ! -f $md5_file_calc.ok ]; do
    sleep .1
  done
  rm -f $md5_file_pipe
  rm -f $md5_file_pipe.ok
  rm -f $md5_file_calc
  rm -f $md5_file_calc.ok
}
#---sfx_cut---

steam_with_crc(){ #cat stdin + <md5 checksum of stdin>
  md5_file=$(mktemp -u)
  tee >(openssl md5 -binary > $md5_file;touch $md5_file.ok) 
  while [ ! -f $md5_file.ok ]; do
    sleep .1
  done;
  if [ "$(stat --printf="%s" $md5_file)" -eq $checksum_lenght ]; then
    cat $md5_file
  else
    echo -n "--no checksum.--" #16 bytes!
    (>&2 echo "Can't calulate checksum!")
  fi
  rm -f $md5_file
  rm -f $md5_file.ok
}
encrypt(){
  session_key_b64=$(openssl rand $session_key_lenght|base64 -w0)
  encrypted_session_key_b64=$(openssl rsautl -encrypt -inkey <(echo -n "$public_key_txt") -pubin -in <(b64_2_bytes $session_key_b64) -out >(base64 -w0))
  encrypted_session_key_lenght=$(b64_2_bytes $encrypted_session_key_b64|wc --bytes)

  #header
  echo -n "$steam_signature"
  echo -ne "$encrypt_alg\0"
  echo -ne "$private_key_txt\0"
  echo -ne "$pdftk_iteration_count\0"
  echo -ne "$pass_digest\0"
  pdkdf2_iteration_flag=""
  if [ -n "$pdkdf2_iteration_count" ]; then
    pdkdf2_iteration_flag="-iter $pdkdf2_iteration_count"
  fi
  
  printf "%.8x" $encrypted_session_key_lenght|xxd -r -p
  b64_2_bytes "$encrypted_session_key_b64"
  steam_with_crc|openssl enc -$encrypt_alg $pdkdf2_iteration_flag -md $pass_digest -salt -pass file:<(b64_2_bytes $session_key_b64)
}



max_rsa_content_lenght_for_key() {
  key_size=$(openssl rsa -in <(echo -n "$1") -pubin -text -noout|sed -nr 's/.*Public-Key: \(([0-9]+) bit\)/\1/p') #key lenght in bytes
  hash_size=160 #SHA-1 hash size
  echo $(( (key_size+7)/8-(2*hash_size)/8-2 )) #calculate maximum session key lenght for given public key lenght
}  

log(){
  echo "$@"
  if [ ! -z "$logfile" ]; then
    echo "$(date --rfc-3339=ns) : $@" >> $logfile
  fi
}

sfx_script() {
  sfx_cut_signature="#""---sfx_cut---"
  echo "#!/bin/bash"
  sfx_cut="$(cat $progfullname|sed -e "s/$sfx_cut_signature/\x00/g"|bash -c "IFS=; read -r -d '';read -r -d '' tmp; echo \$tmp")"
  echo "$sfx_cut"
cat << END_OF_SFX
unpack() {
  IFS= read -r -d ''
  cat|decrypt
}
if [ -f "\$1" ]; then
  private_key_txt="\$(cat "\$1")"
fi
(>&2 echo -n Password: )
read -s password
(>&2 echo)
cat "\$progfullname"|unpack
exit
END_OF_SFX

}

#Default values
encrypt_alg=aes-256-cbc #openssl symetric protocol used for encryption, decryption will autodetect
in="-"
out="/dev/stdout"



usage()
{
cat << EO

Usage: $progname [options]

Options:
EO
cat <<EO | column -s\& -te
  -h|--help&show this help
  -v|--version&show version info

  --create&create envelope
  --extract&extract file from envelope

  --envelope <file>&Creating file, if not set the STDIN/STDOUT will be used
  --in <file&Input file. Default stdin 
  --out <file>&Out file. Default stdout

  --public-key <file>&Public key for creating envelope
  --private-key <file>&Private key for self extracting archive (must be encrypted when creating sfx envelope)

  --sfx&create self extracting archive
  --encrypt-alg&Encryption algotithm. Default $encrypt_alg
EO
}

shortopts="hv"
longopts="help,version,create,extract,envelope:,in:,out:,public-key:,private-key:,sfx,encrypt-alg:"
args=$(getopt -s bash --options $shortopts --longoptions $longopts --name $progname -- "$@" )
eval set -- "$args"

while true; do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;
    -v|--version)
      echo "progversion"
      exit 0
      ;;
    --sfx|--create|--extract)
      parametr_name=${1:2}
      declare "${parametr_name//-/_}"="yes" #variable name is $1 without -- and with replace "-"->"_"
      ;;
    --envelope|--out|--public-key|--private-key|--in|--encrypt-alg)
      parametr_name=${1:2}
      declare "${parametr_name//-/_}"="$(printf '%q' "$2")" #variable name is $1 without -- and with replace "-"->"_"
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Unknown parametr: $1" 1>&2
      exit 1
      ;;
  esac
  shift
done

#if ! validate_args; then
#  exit 1;
#fi

if [ -f "$private_key" ]; then
  private_key_txt="$(cat "$private_key")"
fi

if [ -f "$public_key" ]; then
  public_key_txt="$(cat "$public_key")"
fi

if [ "$extract" == "yes" ]; then
  if [ -z "$password" ]; then
    echo -n Password: 
    read -s password
    echo
  fi
  cat ${in}|decrypt > ${out}  
  
else if [ "$create" == "yes" ]; then
  #Calculated vaules
  session_key_lenght=$(max_rsa_content_lenght_for_key "$public_key_txt")
  pdkdf2_iteration_count="" #Set this to number when using openssl>=1.1.1 fo better pass to key algorythm
  pass_digest="md5" #md5 hardcoded into openssl <=1.0.2, sha256 default for openssl >1.0.2
  >${out}
  if [ "$sfx" == "yes" ]; then
    sfx_script >> ${out}
    echo -en "\0" >>${out}
  fi
  cat ${in}|encrypt >> ${out}   
else
  usage
fi fi
